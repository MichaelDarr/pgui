syntax = "proto3";

import "google/protobuf/any.proto";

option go_package = "github.com/MichaelDarr/pgui/proto";

package postgres;

service PostgresService {
    rpc DeleteConnection(DeleteConnectionRequest) returns (DeleteConnectionResponse) {}
    rpc GetConnections(GetConnectionsRequest) returns (GetConnectionsResponse) {}
    rpc GetSchemas(GetSchemasRequest) returns (GetSchemasResponse) {}
    rpc GetSchemaTables(GetSchemaTablesRequest) returns (GetSchemaTablesResponse) {}
    rpc GetTable(stream GetTableRequest) returns (stream GetTableResponse) {}
    rpc SaveConnection(SaveConnectionRequest) returns (SaveConnectionResponse) {}
    rpc TestConnection(TestConnectionRequest) returns (TestConnectionResponse) {}
}

message Connection {
    Credentials credentials = 1;
    string id = 2;
    string name = 3;
    string color = 4;
}

message Credentials {
    string host = 1;
    int32 port = 2;
    string user = 3;
    string db = 4;
    string password = 5;
}

message Field {
    string name = 1;
    uint32 tableOID = 2;
}

/* QueryRequestStream represents a request regarding an open stream of data
 * queried from Postgres. */

message QueryRequestStream {
    int32 rows = 1; // Number of additional rows to be read and streamed
    bool metadata = 2; // If true, send query metadata before additional rows
}

/* QueryResultStream represents data from an active Postgres query. */

message QueryResultStream {
    message MetadataResult {
        repeated Field fields = 1;
        int64 rowsRead = 2;
    }
    message RowResult {
        repeated google.protobuf.Any value = 2;
    }
    oneof data {
        MetadataResult metadata = 1;
        RowResult row = 2;
    }
}

message Table {
    string name = 1;
    string schema = 2;
    string owner = 3;
    bool hasIndexes = 4;
    bool hasRules = 5;
    bool hasTriggers = 6;
    bool hasRowSecurityEnabled = 7;
}

message DeleteConnectionRequest {
    string connectionID = 1;
}

message DeleteConnectionResponse {}

message GetConnectionsRequest {}

message GetConnectionsResponse {
    repeated Connection connections = 1;
}

message GetSchemasRequest {
    string connectionID = 1;
}

message GetSchemasResponse {
    repeated string schemas = 1;
}

message GetSchemaTablesRequest {
    string connectionID = 1;
    string schema = 2;
}

message GetSchemaTablesResponse {
    repeated Table tables = 1;
}

message GetTableRequest {
    message InitializeQuery {
        string connectionID = 1;
        string schema = 2;
        string table = 3;
    }
    oneof request {
        InitializeQuery initialize = 1;
        QueryRequestStream query = 2;
    }
}

message GetTableResponse {
    QueryResultStream result = 1;
}

message SaveConnectionRequest {
    Connection connection = 1;
}

message SaveConnectionResponse {
    Connection connection = 1;
}

message TestConnectionRequest {
    Credentials credentials = 1;
}

message TestConnectionResponse {
    bool success = 1;
    string errorMessage = 2;
}
