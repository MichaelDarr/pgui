import { contextBridge } from 'electron';
import {
    ChannelCredentials,
    Client,
    credentials,
    requestCallback,
    ClientUnaryCall,
} from "@grpc/grpc-js";

import { ConnectRequest } from "../protos/postgres/postgres_pb";
import { PostgresServiceClient } from '../protos/postgres/postgres_grpc_pb';

interface Deserializer<T> {
    deserializeBinary: (bytes: Uint8Array) => T;
}

// A function exposed by `exposeInMainWorld` to forward RPCs
type RPCForwarder = (argument: Uint8Array, callback: requestCallback<Uint8Array>) => ClientUnaryCall;

// A type helper which extracts RPC names from autogenerated service clients
type ServiceRPCName<T> = {
    [P in keyof T]: T[P] extends unknown
        ? P extends keyof Client
            ? never
            : P
        : never;
}[keyof T];

/* Postgres Service
 ********************************************************/
export type PostgresServiceRPCName = ServiceRPCName<PostgresServiceClient>;
export type PostgresServiceRPCRequest<T extends PostgresServiceRPCName> = Parameters<PostgresServiceClient[T]>[0];
export type PostgresServiceRPCResponse<T extends PostgresServiceRPCName> = NonNullable<Parameters<Parameters<PostgresServiceClient[T]>[3]>[1]>;
export type PostgresService = Record<PostgresServiceRPCName, RPCForwarder>;

const getClientAddress = (): string => {
    return 'unix:///tmp/pgui1.sock';
}

const getClientCredentials = (): ChannelCredentials => {
    return credentials.createInsecure();
}

let postgresClient: PostgresServiceClient|null = null;
const getPostgresClient = (): PostgresServiceClient => {
    if (postgresClient === null) {
        postgresClient = new PostgresServiceClient(
            getClientAddress(),
            getClientCredentials(),
        );
    }
    return postgresClient;
}

function createPostgresTargetMethod <T extends PostgresServiceRPCName>(
    postgresKey: T,
    deserializer: Deserializer<Parameters<PostgresServiceClient[T]>[0]>,
): (argument: Uint8Array, callback: requestCallback<Uint8Array>) => ClientUnaryCall {
    return (argument, callback) => getPostgresClient()[postgresKey](
        deserializer.deserializeBinary(argument),
        (err, value) => {
            callback(err, value?.serializeBinary());
        }
    );
}

const postgresTarget: PostgresService = {
    connect: createPostgresTargetMethod('connect', ConnectRequest),
};

contextBridge.exposeInMainWorld('electron', {
    proto: {
        postgres: postgresTarget,
    }
});
